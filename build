#!/bin/bash
# SPDX-License-Identifier: GPL-3.0-or-later

set -e -o pipefail

# TODO: exit when the source command is detected

# function usage
usage() {
    echo -n "\
Usage: $BASH_SOURCE [OPTION]... [PARAM=VAL]...

    -h/help
    -c/command      specify a custom command
        clear/cr    clears temporary variables about the project in the current shell
        clean/cn    clean all spanned file
    -b/build        building the specified package

Description: Board Dog Build Tool
License: GPL-3.0-or-later
"
}

_parse_param() {
    local argcs=$@
    export B_OPTION=
    export C_OPTION=
    while getopts ":hc:b:" argcs; do
        case "${argcs}" in
        b) B_OPTION="${OPTARG}" ;;
        c) C_OPTION="${OPTARG}" ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage
            exit 0
            ;;
        esac
    done
}

# parsing shell parameters
_parse_param $@

source src/env $@ || {
    echo -n "[error] env failed."
    exit -1
}

source src/base || {
    echo -n "[error] base failed."
    exit -1
}

source src/log
source src/libs/packages
source src/download
source src/common
source src/project
source src/desktop
source src/rootfs
source src/image
source src/os
source src/app
source src/sdk

# function main
_main() {
    # parsing commands
    local ret=0
    local cmd=$C_CMD_OPTION
    case $cmd in
    clear | cr)
        clear_env
        return $?
        ;;
    clean* | cn*)
        log_info "clean all output middleware."
        clean $cmd
        return $?
        ;;
    *) ;;
    esac
    # pre process
    start_time=$(date +%s)
    log_info "start build..."
    create_new_session || {
        log_err "create_new_session failed."
        return 1
    }
    prepare_packages || return 2
    # core process
    # @1. build app
    [ ! -z $APP_OPTION ] && build_app_a
    if [ ! -z $IMAGE_OPTION ]; then
        sdk $IMAGE_OPTION
        # @2. build sdk - uboot
        # sdk uboot
        # @3. build sdk - kernel deb
        # sdk kernel
        # @4. build ubuntu rootfs
        # @5. build image
    else
        sdk
    fi
    ret=$?
    # post process
    clean_old_session
    log_info "build done, $(date)"
    end_time=$(date +%s)
    time_cal $(($end_time - $start_time))
    return $ret
}

# start
_main
# end
